package com.kh.teamprj.controller;

import java.security.SecureRandom;
import java.util.HashMap;

import javax.annotation.Resource;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.kh.teamprj.vo.MemberVO;

import net.nurigo.java_sdk.api.Message;
import net.nurigo.java_sdk.exceptions.CoolsmsException;

import com.kh.teamprj.service.MemberService;

@Controller
@RequestMapping("/member")
public class MemberController {
	@Resource(name="memberService")
	private MemberService memberService;
	
//	@Autowired
//	private JavaMailSender mailSender; // 메일 전송을 위한 변수
	
	@GetMapping("/home")
	public String home(){
		return "member/home";
	}
	
	@GetMapping("/login")
	public String login(){
		memberService.selectMemberList();
		return "member/login";
	}
	
	@GetMapping("/join")
	public String join(String joinType, Model model){
		model.addAttribute("joinType", joinType); // 등록할 회원 유형 구분
		return "member/join";
	}
	
	@PostMapping("/checkEmail")
	@ResponseBody
	public String checkEmail(String email) {
		if (memberService.selectEmailByMember(email) == null) { // 중복된 이메일이 없을 시
			String temporaryPw = getTemporaryPw(6); // 임시 코드 발급
			
//			try {
//				// 메일 보내기
//				MimeMessage message = mailSender.createMimeMessage();
//				MimeMessageHelper msgHelper = new MimeMessageHelper(message, true, "UTF-8");
//				msgHelper.setFrom("운영자 <mitasoar@gmail.com>"); // 메일 발신 계정
//				msgHelper.setTo(email); // 메일 수신 계정
//				msgHelper.setSubject("[테스트] 확인을 위한 코드 발송 메일입니다."); // 메일 제목
//				msgHelper.setText("[테스트] 이메일 확인 코드는 '" + temporaryPw + "' 입니다."); // 메일 내용
//
//				mailSender.send(message); // 메일 발송
//			} catch (MessagingException e) {
//				e.printStackTrace();
//			}
			
			return temporaryPw; // 임시 코드값을 리턴
		} else {
			return "fail"; // 중복된 메일이 있으므로 fail 리턴
		}
		
	}
	
	@PostMapping("/checkPhone")
	@ResponseBody
	public String checkPhone(String phone) {
		if (memberService.selectPhoneByMember(phone) != null) {
			String temporaryPw = getTemporaryPw(6);
			
			TestCoolsms.certifiedPhoneNumber(phone, temporaryPw);
			
			return temporaryPw;
		} else {
			return "fail";
		}
		
	}
	
	// 확인을 위한 임시 코드 생성
	public String getTemporaryPw(int num) {
		String str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
		StringBuilder returnPw = new StringBuilder();
		
		for (int i = 0; i < num; i++) {
			returnPw.append(str.charAt(new SecureRandom().nextInt(str.length())));
		}
		
		return returnPw.toString();
	}
		
}

class TestCoolsms {
	static void certifiedPhoneNumber(String phoneNumber, String cerNum) {
		String api_key = "NCS7KUP2FLY83FIY"; //위에서 받은 api key를 추가
        String api_secret = "F9MLFPOFZNUQQXT7J7YBAYJTE6ACXNRP";  //위에서 받은 api secret를 추가
        Message coolsms = new Message(api_key, api_secret);
        
        HashMap<String, String> params = new HashMap<String, String>();
        params.put("to", phoneNumber); // 수신번호 등록
        params.put("from", "01082201910"); // 발신번호 등록
        params.put("type", "SMS"); // 문자 유형 등록
        params.put("text", "휴대폰 인증 테스트 메시지 : 인증번호는 " + "[" + cerNum + "] 입니다."); // 문자 내용 등록
        params.put("app_version", "test app 1.2"); // 버전 등록
        
        try {
        	JSONObject obj = (JSONObject)coolsms.send(params);
        	System.out.println(obj.toString());
        } catch (CoolsmsException e) {
        	System.out.println(e.getMessage());
        	System.out.println(e.getCode());
        }
        
        
	}
}
