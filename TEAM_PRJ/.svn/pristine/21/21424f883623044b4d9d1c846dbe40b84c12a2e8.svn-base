<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="boardMapper">
	<!-- BoardVO -->
	<resultMap type="com.kh.teamprj.vo.BoardVO" id="board">
		<id column="BOARD_NO" property="boardNo"/>
		<result column="BOARD_TITLE" property="boardTitle"/>
		<result column="BOARD_CONTENT" property="boardContent"/>
		<result column="BOARD_WRITER" property="boardWriter"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="UPDATE_DATE" property="updateDate"/>
		<result column="IS_DELETE" property="isDelete"/>
		<result column="IS_NOTICE" property="isNotice"/>
		<result column="IS_SECRET" property="isSecret"/>
		<result column="READ_CNT" property="readCnt"/>
		<result column="REPLY_CNT" property="replyCnt"/>
		<result column="FILE_CNT" property="fileCnt"/>
		<result column="CATE_NO" property="cateNo"/>
		<result column="CATE_NAME" property="cateName"/>
		<result column="RN" property="rn"/>
		<association resultMap="memberMapper.member" property="member"/>
	</resultMap>
	
	<!-- BoardCategoryVO -->
	<resultMap type="com.kh.teamprj.vo.BoardCategoryVO" id="category">
		<id column="CATE_NO" property="cateNo"/>
		<result column="CATE_NAME" property="cateName"/>
		<result column="IS_USE" property="isUse"/>
	</resultMap>
	
	<!-- ReplyVO -->
	<resultMap type="com.kh.teamprj.vo.ReplyVO" id="reply">
		<id column="REPLY_NO" property="replyNo"/>
		<result column="BOARD_NO" property="boardNo"/>
		<result column="REPLY_CONTENT" property="replyContent"/>
		<result column="REPLY_WRITER" property="replyWriter"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="UPDATE_DATE" property="updateDate"/>
		<result column="IS_DELETE" property="isDelete"/>
		<result column="IS_SECRET" property="isSecret"/>
		<result column="MEM_NAME" property="memName"/>
	</resultMap>
	
	<!-- FileVO -->
	<resultMap type="com.kh.teamprj.vo.FileVO" id="file">
		<id column="FILE_NO" property="fileNo"/>
		<result column="ORIGIN_FILE" property="originFile"/>
		<result column="SAVE_FILE" property="saveFile"/>
		<result column="SAVE_FOLDER" property="saveFolder"/>
		<result column="BOARD_NO" property="boardNo"/>
		<result column="CREATE_DATE" property="createDate"/>
	</resultMap>
	
	<!-- 모든 카테고리 목록 조회 -->
	<select id="selectBoardCategoryListAll" resultMap="category">
		SELECT CATE_NO
			, CATE_NAME
			, IS_USE
		FROM BOARD_CATEGORY
		ORDER BY TO_NUMBER(SUBSTR(CATE_NO, 6))
	</select>
	
	<!-- 사용하는 카테고리 목록 조회 -->
	<select id="selectBoardCategoryList" resultMap="category" parameterType="String">
		SELECT CATE_NO
			, CATE_NAME
		FROM BOARD_CATEGORY
		WHERE IS_USE = 'Y'
		AND CATE_NO NOT IN (
		<choose>
			<when test="_parameter == 'stu'">
				'CATE_2', 'CATE_3'
			</when>		
			<when test="_parameter == 'pro'">
				'CATE_1', 'CATE_3'
			</when>		
			<when test="_parameter == 'emp'">
				'CATE_1', 'CATE_2'
			</when>
			<when test="_parameter == 'admin'">
			</when>
			<otherwise>
				'CATE_1', 'CATE_2', 'CATE_3'
			</otherwise>
		</choose>
		)
		ORDER BY CATE_NAME
	</select>
	
	<!-- 카테고리 이름 조회 -->
	<select id="selectCateName" resultType="String" parameterType="String">
		SELECT CATE_NAME
		FROM BOARD_CATEGORY
		WHERE IS_USE = 'Y'
		AND CATE_NO = #{cateNo}
	</select>
	
	<!-- 카테고리 추가 -->
	<insert id="insertBoardCategory" parameterType="String">
		INSERT INTO BOARD_CATEGORY
		VALUES (
			(SELECT 'CATE_' || TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(CATE_NO, 6))), 0) + 1) FROM BOARD_CATEGORY)
			, #{cateName}
			, 'Y'
		)
	</insert>
	
	<!-- 카테고리 수정 -->
	<update id="updateBoardCategory">
		UPDATE BOARD_CATEGORY
		SET CATE_NAME = #{cateName}
			, IS_USE = #{isUse}
		WHERE CATE_NO = #{cateNo}
	</update>
	
	<!-- 메인화면 게시판 목록 -->
	<select id="selectViewBoardList" resultMap="board" parameterType="String">
		SELECT ROWNUM, A.*
			FROM (
				SELECT B.BOARD_NO
					, B.BOARD_TITLE
					, B.BOARD_WRITER
					, TO_CHAR(B.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
					, TO_CHAR(B.UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE
					, B.REPLY_CNT
					, B.FILE_CNT
					, M.MEM_NAME
					, M.MEM_IMAGE
				FROM BOARD B, MEMBER M
				WHERE B.BOARD_WRITER = M.MEM_NO 
				AND M.IS_JOIN = 'Y' 
				AND B.IS_DELETE = 'N'
				<choose>
					<when test="_parameter != null and _parameter != ''">
						AND B.CATE_NO = #{cateNo}
					</when>
					<otherwise>
						AND B.IS_NOTICE = 'Y'
					</otherwise>
				</choose>
				ORDER BY B.CREATE_DATE DESC
				) A
			WHERE ROWNUM &lt;= 10
	</select>
	
	<!-- 게시판 공지사항 리스트(5개까지) -->
	<select id="selectNoticeBoardList" resultMap="board" parameterType="String">
		SELECT ROWNUM, A.*
			FROM (
				SELECT B.BOARD_NO
					, B.BOARD_TITLE
					, B.BOARD_WRITER
					, TO_CHAR(B.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
					, TO_CHAR(B.UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE
					, B.READ_CNT
					, B.REPLY_CNT
					, B.FILE_CNT
					, M.MEM_NAME
					, M.MEM_IMAGE
				FROM BOARD B, MEMBER M
				WHERE B.BOARD_WRITER = M.MEM_NO AND M.IS_JOIN = 'Y' AND B.IS_DELETE = 'N' AND B.IS_NOTICE = 'Y'
				<if test="_parameter != null and _parameter != ''"> <!-- 게시판 카테고리 구분 -->
					AND B.CATE_NO = #{cateNo}
				</if>
				ORDER BY B.CREATE_DATE DESC
				) A
			WHERE ROWNUM &lt;= 5
	</select>
	
	<!-- 페이징 처리를 위한 게시판 수 조회 -->
	<select id="countBoardList" resultType="int">
		SELECT COUNT(*)
		<choose>
			<when test="reply != null"> <!-- 댓글 검색 전용 -->
				FROM (
					SELECT DISTINCT(B.BOARD_NO)
					FROM BOARD B, MEMBER BM, REPLY R, MEMBER RM
					WHERE R.REPLY_WRITER = RM.MEM_NO
					AND B.BOARD_WRITER = BM.MEM_NO 
					AND B.BOARD_NO = R.BOARD_NO 
					AND BM.IS_JOIN = 'Y' 
					AND RM.IS_JOIN = 'Y' 
					AND B.IS_DELETE = 'N' 
					AND R.IS_DELETE = 'N'
					<if test="reply.replyContent != null and reply.replyContent != ''"> <!-- 댓글 내용 검색 -->
						AND UPPER(R.REPLY_CONTENT) LIKE UPPER('%' ||  #{reply.replyContent} || '%')
					</if>
					<if test="reply.replyWriter != null and reply.replyWriter != ''"> <!-- 댓글 작성자 검색 -->
						AND UPPER(RM.MEM_NAME) LIKE UPPER('%' ||  #{reply.replyWriter} || '%')
					</if>
					<if test="cateNo != null and cateNo != ''"> <!-- 게시판 카테고리 구분 -->
						AND B.CATE_NO = #{cateNo}
					</if>
					<if test="isSecret != null and isSecret != ''"> <!-- 비밀글 제외 구분 -->
						AND B.IS_SECRET = #{isSecret}
					</if>
				)
			</when>
			<otherwise> <!-- 그 외 -->
				FROM BOARD B, MEMBER M
				WHERE B.BOARD_WRITER = M.MEM_NO 
				AND M.IS_JOIN = 'Y'
				AND B.IS_DELETE = 'N'
				<if test="isNotice != null and isNotice != ''"> <!-- 게시판 공지사항 구분 -->
					AND B.IS_NOTICE = #{isNotice}
				</if>
				<if test="cateNo != null and cateNo != ''"> <!-- 게시판 카테고리 구분 -->
					AND B.CATE_NO = #{cateNo}
				</if>
				<if test="isSecret != null and isSecret != ''"> <!-- 비밀글 제외 구분 -->
					AND B.IS_SECRET = #{isSecret}
				</if>
				<choose> <!-- 검색 기능 -->
					<when test="boardTitle != null and boardTitle != '' and boardContent != null and boardContent != ''"> <!-- 제목 + 내용 검색 -->
						AND (UPPER(B.BOARD_TITLE) LIKE UPPER('%' ||  #{boardTitle} || '%') OR UPPER(B.BOARD_CONTENT) LIKE UPPER('%' ||  #{boardContent} || '%'))
					</when>
					<when test="boardTitle != null and boardTitle != ''"> <!-- 제목 검색 -->
						AND UPPER(B.BOARD_TITLE) LIKE UPPER('%' ||  #{boardTitle} || '%')
					</when>
					<when test="boardContent != null and boardContent != ''"> <!-- 내용 검색 -->
						AND UPPER(B.BOARD_CONTENT) LIKE UPPER('%' ||  #{boardContent} || '%')
					</when>
					<when test="boardWriter != null and boardWriter != ''"> <!-- 작성자 검색 -->
						AND UPPER(M.MEM_NAME) LIKE UPPER('%' ||  #{boardWriter} || '%')
					</when>
				</choose>
			</otherwise>
		</choose>
	</select>
	
	<!-- 게시판 조회(페이징) -->
	<select id="selectBoardListPaging" resultMap="board">
		SELECT *
		FROM (
			SELECT ROWNUM RN, A.*
			FROM (
				SELECT B.BOARD_NO
					, B.BOARD_TITLE
					, B.BOARD_WRITER
					, TO_CHAR(B.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
					, TO_CHAR(B.UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE
					, B.READ_CNT
					, B.REPLY_CNT
					, B.FILE_CNT
					, B.IS_SECRET
				<choose>
					<when test="reply != null"> <!-- 댓글 검색 전용 -->
					, B.MEM_NAME
					, B.MEM_IMAGE
						FROM (
							SELECT DISTINCT(BO.BOARD_NO) AS BOARD_NO
								, BO.BOARD_TITLE
								, BO.BOARD_WRITER
								, BO.CREATE_DATE
								, BO.UPDATE_DATE
								, BO.READ_CNT
								, BO.REPLY_CNT
								, BO.IS_SECRET
								, BM.MEM_NAME
								, BM.MEM_IMAGE
							FROM BOARD BO, MEMBER BM, REPLY R, MEMBER RM
							WHERE R.REPLY_WRITER = RM.MEM_NO
							AND BO.BOARD_WRITER = BM.MEM_NO 
							AND BO.BOARD_NO = R.BOARD_NO 
							AND BM.IS_JOIN = 'Y' 
							AND RM.IS_JOIN = 'Y' 
							AND BO.IS_DELETE = 'N' 
							AND R.IS_DELETE = 'N'
							<if test="reply.replyContent != null and reply.replyContent != ''"> <!-- 댓글 내용 검색 -->
								AND UPPER(R.REPLY_CONTENT) LIKE UPPER('%' ||  #{reply.replyContent} || '%')
							</if>
							<if test="reply.replyWriter != null and reply.replyWriter != ''"> <!-- 댓글 작성자 검색 -->
								AND UPPER(RM.MEM_NAME) LIKE UPPER('%' ||  #{reply.replyWriter} || '%')
							</if>
							<if test="cateNo != null and cateNo != ''"> <!-- 게시판 카테고리 구분 -->
								AND BO.CATE_NO = #{cateNo}
							</if>
							<if test="isSecret != null and isSecret != ''"> <!-- 비밀글 제외 구분 -->
								AND BO.IS_SECRET = #{isSecret}
							</if>
						) B
					</when>
					<otherwise> <!-- 그 외 -->
						, M.MEM_NAME
						, M.MEM_IMAGE
						FROM BOARD B, MEMBER M
						WHERE B.BOARD_WRITER = M.MEM_NO 
						AND M.IS_JOIN = 'Y'
						 AND B.IS_DELETE = 'N'
						<if test="isNotice != null and isNotice != ''"> <!-- 게시판 공지사항 구분 -->
							AND B.IS_NOTICE = #{isNotice}
						</if>
						<if test="cateNo != null and cateNo != ''"> <!-- 게시판 카테고리 구분 -->
							AND B.CATE_NO = #{cateNo}
						</if>
						<if test="isSecret != null and isSecret != ''"> <!-- 비밀글 제외 구분 -->
							AND B.IS_SECRET = #{isSecret}
						</if>
						<choose> <!-- 검색 기능 -->
							<when test="boardTitle != null and boardTitle != '' and boardContent != null and boardContent != ''"> <!-- 제목 + 내용 검색 -->
								AND (UPPER(B.BOARD_TITLE) LIKE UPPER('%' ||  #{boardTitle} || '%') OR UPPER(B.BOARD_CONTENT) LIKE UPPER('%' ||  #{boardContent} || '%'))
							</when>
							<when test="boardTitle != null and boardTitle != ''"> <!-- 제목 검색 -->
								AND UPPER(B.BOARD_TITLE) LIKE UPPER('%' ||  #{boardTitle} || '%')
							</when>
							<when test="boardContent != null and boardContent != ''"> <!-- 내용 검색 -->
								AND UPPER(B.BOARD_CONTENT) LIKE UPPER('%' ||  #{boardContent} || '%')
							</when>
							<when test="boardWriter != null and boardWriter != ''"> <!-- 작성자 검색 -->
								AND UPPER(M.MEM_NAME) LIKE UPPER('%' ||  #{boardWriter} || '%')
							</when>
						</choose>
					</otherwise>
				</choose>
				ORDER BY B.CREATE_DATE DESC
				) A
			WHERE ROWNUM &lt;= #{paging.end}
			)
		WHERE RN &gt;= #{paging.start}
	</select>
	
	<!-- 게시판 상세 조회 -->
	<select id="selectBoardOne" resultMap="board" parameterType="String">
		SELECT B.BOARD_NO
			, B.BOARD_TITLE
			, B.BOARD_CONTENT
			, B.BOARD_WRITER
			, B.CREATE_DATE
			, B.UPDATE_DATE
			, B.IS_NOTICE
			, B.IS_SECRET
			, B.READ_CNT
			, B.CATE_NO
			, C.CATE_NAME
			, M.MEM_NAME
			, M.MEM_IMAGE
		FROM BOARD B, BOARD_CATEGORY C, MEMBER M
		WHERE B.CATE_NO = C.CATE_NO 
		AND B.BOARD_NO = #{boardNo} 
		AND B.BOARD_WRITER = M.MEM_NO
		AND M.IS_JOIN = 'Y'
	</select>
	
	<!-- 게시판 글 등록 -->
	<insert id="insertBoard">
		<if test="fileInfos == null">
		INSERT INTO BOARD (
				BOARD_NO
				, BOARD_TITLE
				, BOARD_CONTENT
				, BOARD_WRITER
				<if test="isNotice != null and isNotice != ''"> <!-- 게시판 공지사항 구분 -->
					, IS_NOTICE
				</if>
				<if test="isSecret != null and isSecret != ''"> <!-- 게시판 비밀글 구분 -->
					, IS_SECRET
				</if>
				, CATE_NO
			) VALUES (
				(SELECT 'BOARD_' || TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(BOARD_NO, 7))), 0) + 1) FROM BOARD)
				, #{boardTitle}
				, #{boardContent}
				, #{boardWriter}
				<if test="isNotice != null and isNotice != ''"> <!-- 게시판 공지사항 구분 -->
					, #{isNotice}
				</if>
				<if test="isSecret != null and isSecret != ''"> <!-- 게시판 비밀글 구분 -->
					, #{isSecret}
				</if>
				, #{cateNo}
			)
		</if>
		<if test="fileInfos != null">
			INSERT ALL
			INTO BOARD (
					BOARD_NO
					, BOARD_TITLE
					, BOARD_CONTENT
					, BOARD_WRITER
					<if test="isNotice != null and isNotice != ''"> <!-- 게시판 공지사항 구분 -->
						, IS_NOTICE
					</if>
					<if test="isSecret != null and isSecret != ''"> <!-- 게시판 비밀글 구분 -->
						, IS_SECRET
					</if>
					, CATE_NO
					, FILE_CNT
				) VALUES (
					(SELECT 'BOARD_' || TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(BOARD_NO, 7))), 0) + 1) FROM BOARD)
					, #{boardTitle}
					, #{boardContent}
					, #{boardWriter}
					<if test="isNotice != null and isNotice != ''"> <!-- 게시판 공지사항 구분 -->
						, #{isNotice}
					</if>
					<if test="isSecret != null and isSecret != ''"> <!-- 게시판 비밀글 구분 -->
						, #{isSecret}
					</if>
					, #{cateNo}
					, #{fileCnt}
				)
			<foreach collection="fileInfos" item="file" index="i">
			INTO ATTACHED_FILE (
					FILE_NO
					, ORIGIN_FILE
					, SAVE_FILE
					, SAVE_FOLDER
					, BOARD_NO
				) VALUES (
					(SELECT 'FILE_' || TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(FILE_NO, 6))), 0) + 1 + #{i}) FROM ATTACHED_FILE)
					, #{file.originFile}
					, #{file.saveFile}
					, #{file.saveFolder}
					, (SELECT 'BOARD_' || TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(BOARD_NO, 7))), 0) + 1) FROM BOARD)
				)
			</foreach>
			SELECT * FROM DUAL
		</if>
	</insert>
	
	<!-- 등록된 게시글번호 조회 -->
	<select id="selectLastBoardNo" resultType="String">
		SELECT 'BOARD_' || MAX(TO_NUMBER(SUBSTR(BOARD_NO, 7)))
		FROM BOARD
	</select>
	
	<!-- 첨부파일 삭제 -->
	<delete id="deleteFileList">
		<if test="boardNo != null and boardNo != ''">
			DELETE FROM ATTACHED_FILE
			WHERE BOARD_NO = #{boardNo}
		</if>
	</delete>
	
	<!-- 첨부파일 등록 -->
	<insert id="insertFileList">
		<foreach collection="fileInfos" item="file" index="i" open="INSERT ALL"  close="SELECT * FROM DUAL" separator=" ">
		INTO ATTACHED_FILE (
				FILE_NO
				, ORIGIN_FILE
				, SAVE_FILE
				, SAVE_FOLDER
				, BOARD_NO
			) VALUES (
				(SELECT 'FILE_' || TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(FILE_NO, 6))), 0) + 1 + #{i}) FROM ATTACHED_FILE)
				, #{file.originFile}
				, #{file.saveFile}
				, #{file.saveFolder}
				, #{boardNo}
			)
		</foreach>
	</insert>
	
	<!-- 첨부파일 리스트 -->
	<select id="selectFileList" parameterType="String" resultMap="file">
		SELECT FILE_NO
			, ORIGIN_FILE
			, SAVE_FILE
			, SAVE_FOLDER
		FROM ATTACHED_FILE
		WHERE BOARD_NO = #{boardNo}
	</select>
	
	<!-- 조회수 업데이트 -->
	<update id="updateReadCnt" parameterType="String">
		UPDATE BOARD
		SET READ_CNT = READ_CNT + 1
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 게시판 삭제 처리 -->
	<update id="deleteBoardOne">
		UPDATE BOARD
		SET IS_DELETE = 'Y'
			, UPDATE_DATE = CURRENT_DATE
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 게시판 정보 수정 -->
	<update id="updateBoardOne">
		UPDATE BOARD
		SET BOARD_TITLE = #{boardTitle}
			, BOARD_CONTENT = #{boardContent}
			, UPDATE_DATE = CURRENT_DATE
			, CATE_NO = #{cateNo}
			<if test="fileCnt != null and fileCnt != ''">
				, FILE_CNT = #{fileCnt}
			</if>
			<choose>
				<when test="isNotice != null and isNotice != ''"> <!-- 공지사항일 때 -->
					, IS_NOTICE = #{isNotice} <!-- 공지사항 체크 시 공지사항 값 입력 -->
					, IS_SECRET = 'N' <!-- 공지사항 체크 시 비밀글 해제 -->
				</when>
				<otherwise> <!-- 공지사항 아닐 때 -->
					, IS_NOTICE = 'N' <!-- 공지사항 해제 -->
					<if test="isSecret != null and isSecret != ''"> <!-- 게시판 비밀글 구분 -->
						, IS_SECRET = #{isSecret} <!-- 비밀글 설정 -->
					</if>
				</otherwise>
			</choose>
		WHERE BOARD_NO = #{boardNo}
	</update>
		
	<!-- 댓글 조회(페이징) -->
	<select id="selectReplyListPaging" resultMap="reply">
		SELECT *
		FROM (
			SELECT ROWNUM RN, A.*
			FROM (
				SELECT R.REPLY_NO
					, R.REPLY_CONTENT
					, R.REPLY_WRITER
					, TO_CHAR(R.CREATE_DATE, 'YY-MM-DD HH24:Mi:SS') AS CREATE_DATE
					, TO_CHAR(R.UPDATE_DATE, 'YY-MM-DD HH24:Mi:SS') AS UPDATE_DATE
					, R.IS_SECRET
					, M.MEM_NAME
				FROM REPLY R, MEMBER M
				WHERE R.REPLY_WRITER = M.MEM_NO 
				AND R.BOARD_NO = #{boardNo} 
				AND R.IS_DELETE = 'N'
				AND M.IS_JOIN = 'Y'
				ORDER BY R.CREATE_DATE DESC
				) A
			WHERE ROWNUM &lt;= #{paging.end}
			)
		WHERE RN &gt;= #{paging.start}
	</select>
	
	<!-- 페이징 처리를 위한 댓글 수 조회 -->
	<select id="countReplyList" resultType="int" parameterType="String">
		SELECT REPLY_CNT
		FROM BOARD
		WHERE BOARD_NO = #{boardNo}
	</select>
	
	<!-- 댓글 등록 -->
	<insert id="insertReply">
		INSERT INTO REPLY (
			REPLY_NO
			, BOARD_NO
			, REPLY_CONTENT
			, REPLY_WRITER
			<if test="isSecret != null and isSecret != ''"> <!-- 비밀 댓글 구분 -->
				, IS_SECRET
			</if>
		) VALUES (
			(SELECT 'REPLY_' || TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(REPLY_NO, 7))), 0) + 1) FROM REPLY)
			, #{boardNo}
			, #{replyContent}
			, #{replyWriter}
			<if test="isSecret != null and isSecret != ''"> <!-- 비밀 댓글 구분 -->
				, #{isSecret}
			</if>
		)
	</insert>
	
	<!-- 댓글 수정 -->
	<update id="updateReply">
		UPDATE REPLY
		SET REPLY_CONTENT = #{replyContent}
			, UPDATE_DATE = CURRENT_DATE
			<if test="isSecret != null and isSecret != ''"> <!-- 비밀 댓글 구분 -->
				, IS_SECRET = #{isSecret}
			</if>
		WHERE REPLY_NO = #{replyNo}
	</update>
	
	<!-- 댓글 삭제 -->
	<update id="deleteReply" parameterType="String">
		UPDATE REPLY
		SET IS_DELETE = 'Y'
			, UPDATE_DATE = CURRENT_DATE
		WHERE REPLY_NO = #{replyNo}
	</update>
	
	<!-- 댓글 추가 된 게시글 업데이트 -->
	<update id="plusReplyCntByBoard">
		UPDATE BOARD
		SET REPLY_CNT = REPLY_CNT + 1
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 댓글 삭제 된 게시글 업데이트 -->
	<update id="minusReplyCntByBoard" parameterType="String">
		UPDATE BOARD
		SET REPLY_CNT = REPLY_CNT - 1
		WHERE BOARD_NO = (SELECT BOARD_NO FROM REPLY WHERE REPLY_NO = #{replyNo})
	</update>
	
</mapper>












